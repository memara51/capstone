Daniel Huynh dhuynh4

Time-Log: Daniel Huynh
3/26 8:00am-9:00am 1 hour
Research on RSA encryption is done and plan is made to make a plan for encrypting a int message in C++
3/27 12:50am-1:50pm 1 hour
Group discussion for what each group member needs to do and debrief on tasks for every member
3/31 3:54pm-8:00pm 4~ hours
Started on a custom implementation of RSA encryption for the calculator server using a basic C++
implementation on the hydra machines to be converted to esp32c3 arduino. A little trouble on
understanding the logic and to understand how the arduino code work, but otherwise the implementing in C++ 
is going smoothly and soon to be ready for testing by the end of the next log.

Rubric - 
20 points - RSA encryption works and successfully encodes and decodes for the calculator
20 points - Tasks to be determined by the group, could be to help others or implement an app on the
calculator

Report - 
Task for a bare bones RSA encryption in C++ went well, implementing from C++ to arduino is to be determined.
Overall testing is good, just need to figure out a way to get a string of any length to be encoded
with the following RSA encryption

Next Steps - Next steps is to finish the arduino encoding and to help other group members on any new tasks
that they would need to finish/start. 

#include<iostream>
#include<math.h>

using namespace std;

//to find gcd using 
int gcd(int a, int h)
{
	int temp;
	while(1)
	{
		temp = a%h;
		if(temp==0)
			return h;
		a = h;
		h = temp;
	}
}

int main()
{
	//2 small prime numbers for testing
	double p = 3;
	double q = 7;
	double n=p*q;
	double count;
	double totient = (p-1)*(q-1);

	//public key
	double e=2;

	//Need to find smallest prime number e stated below
	//for checking gcd(e,totient) == 1, by incrementing e until this condition is satisfied
	while(e<totient){
		count = gcd(e,totient);
		if(count==1) break;
		else{e++;}
	}

	//private key
	double d;

	//k can be any value, just chose 2
	double k = 2;

	//chose a d that satisfies the equation d*e = 1 + k * totient
	d = (1 + (k*totient))/e;
	double msg = 20;//stand in for a message to be continued
	double c = pow(msg,e);
	double m = pow(c,d);
	c=fmod(c,n);
	m=fmod(m,n);

	return 0;
}
